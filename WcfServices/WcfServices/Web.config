<?xml version="1.0"?>
<configuration>
	<configSections>
		<section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net"/>
	</configSections>
	<appSettings>
		<add key="aspnet:UseTaskFriendlySynchronizationContext" value="true" />
	</appSettings>
	<system.web>
		<compilation debug="true" targetFramework="4.7" />
		<httpRuntime targetFramework="4.7"/>
	</system.web>
	<system.serviceModel>
		<extensions>
			<behaviorExtensions>
				<add name="StructureMapServiceBehavior" type="WcfServices.StructureMap.Infrastructure.StructureMapBehaviorExtensionElement, WcfServices.StructureMap, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
				<add name="ErrorHandlingBehavior" type="WcfServices.Infrastructure.ErrorBehaviorExtensionElement, WcfServices" />
			</behaviorExtensions>
		</extensions>
		<behaviors>
			<endpointBehaviors>
				<behavior name="basicHttpEndpointBehavior">
					<dataContractSerializer maxItemsInObjectGraph="2147483647" />
				</behavior>
			</endpointBehaviors>
			<serviceBehaviors>
				<behavior>
					<!-- To avoid disclosing metadata information, set the values below to false before deployment -->
					<serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
					<!-- To receive exception details in faults for debugging purposes, set the value below to true.  Set to false before deployment to avoid disclosing exception information -->
					<serviceDebug includeExceptionDetailInFaults="true" />
					<dataContractSerializer maxItemsInObjectGraph="2147483647" />
					<!-- One note about extensions and Visual Studio: when we use behavior extensions, VS will usually issue a warning about a schema violation, and tag the extension with a squiggly line (see below). The warning states that it is not a valid child for the <behavior> element: “The element 'behavior' has invalid child element 'StructureMapServiceBehavior'.
				List of possible elements expected: 'clientVia, callbackDebug, callbackTimeouts, clear, clientCredentials, transactedBatching, dataContractSerializer, dispatcherSynchronization, remove, synchronousReceive, enableWebScript, webHttp, endpointDiscovery, soapProcessing'.” This is just a nuisance, as this error can be safely ignored and won’t cause any problems during runtime.
				But if you’re someone who gets bugged by warnings (or has a setting in the project to treat all warnings as errors, you can update the configuration schema in Visual Studio at \Program Files\Microsoft Visual Studio 12.0\Xml\Schemas\DotNetSchema.xsd (replace Program Files with Program Files (x86) for 64-bit OS, and replace 12.0 with the appropriate VS version) and update the schema to allow for this new element as well. -->
					<StructureMapServiceBehavior />
					<ErrorHandlingBehavior />
				</behavior>
			</serviceBehaviors>
		</behaviors>
		<bindings>
			<basicHttpBinding>
				<binding name="basicHttpBinding" closeTimeout="01:00:00" openTimeout="01:00:00" receiveTimeout="01:00:00" sendTimeout="01:00:00" maxReceivedMessageSize="2147483647" maxBufferPoolSize="2147483647" maxBufferSize="2147483647">
					<readerQuotas maxDepth="2147483647" maxStringContentLength="2147483647" maxArrayLength="2147483647" maxBytesPerRead="2147483647" maxNameTableCharCount="2147483647" />
				</binding>
			</basicHttpBinding>
		</bindings>
		<protocolMapping>
			<add binding="basicHttpsBinding" scheme="https" />
		</protocolMapping>
		<serviceHostingEnvironment aspNetCompatibilityEnabled="false" multipleSiteBindingsEnabled="false" minFreeMemoryPercentageToActivateService="0" />
		<diagnostics>
			<messageLogging logEntireMessage="true" logMalformedMessages="true" logMessagesAtServiceLevel="true" logMessagesAtTransportLevel="true" maxMessagesToLog="3000" />
		</diagnostics>
		<services>
			<service name="WcfServices.WcfService">
				<endpoint name="WcfServiceBasicHttp" address="" binding="basicHttpBinding" contract="WcfServices.Contracts.IWcfService" />
			</service>
		</services>
	</system.serviceModel>
	<system.webServer>
		<modules runAllManagedModulesForAllRequests="true"/>
		<!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
      -->
		<directoryBrowse enabled="true"/>
	</system.webServer>
	<system.diagnostics>
		<sources>
			<source name="System.ServiceModel" switchValue="Information, Warning, Error, ActivityTracing" propagateActivity="true">
				<listeners>
					<add name="IISXml" />
				</listeners>
			</source>
			<source name="System.ServiceModel.MessageLogging">
				<listeners>
					<add name="IISXml" />
				</listeners>
			</source>
		</sources>
		<sharedListeners>
			<add name="IISXml" type="System.Diagnostics.XmlWriterTraceListener" initializeData="..\Traces\IISTraces.svclog" />
		</sharedListeners>
		<trace autoflush="true" />
	</system.diagnostics>
	<runtime>
		<gcAllowVeryLargeObjects enabled="true" />
		<ThrowUnobservedTaskExceptions enabled="true" />
	</runtime>
	<log4net>
		<appender name="Debug" type="log4net.Appender.DebugAppender">
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%-5level %message%newline" />
			</layout>
		</appender>
		<appender name="Console" type="log4net.Appender.ManagedColoredConsoleAppender">
			<mapping>
				<level value="ERROR" />
				<foreColor value="Red" />
			</mapping>
			<mapping>
				<level value="WARN" />
				<foreColor value="Yellow" />
			</mapping>
			<mapping>
				<level value="INFO" />
				<foreColor value="White" />
			</mapping>
			<mapping>
				<level value="DEBUG" />
				<foreColor value="Green" />
			</mapping>
			<layout type="log4net.Layout.PatternLayout">
				<IgnoresException value="false" />
				<conversionPattern value="%logger{1}: %message%newline" />
			</layout>
		</appender>
		<appender name="RollingFileAppender" type="log4net.Appender.RollingFileAppender">
			<ImmediateFlush value="true" />
			<file value="..\Logs\WcfServices.log"/>
			<appendToFile value="true" />
			<rollingStyle value="Size" />
			<maxSizeRollBackups value="10" />
			<maximumFileSize value="2500000KB" />
			<staticLogFileName value="true" />
			<layout type="log4net.Layout.PatternLayout">
				<conversionPattern value="%date %-5level %logger [%property{NDC}] - %message%newline" />
			</layout>
		</appender>
		<root>
			<level value="All" />
			<appender-ref app="IIS" ref="Debug" />
			<appender-ref app="IIS" ref="Console" />
		</root>
		<!-- Specify the level for some specific categories -->
		<logger name="WcfServices.RollingFileLogger">
			<level value="All" />
			<appender-ref ref="RollingFileAppender" />
		</logger>
	</log4net>
</configuration>
